{
  "instruction_id": "project_scope_statement",
  "document_type": "Project Scope Statement",
  "description": "Using the project charter as input, build a Project Scope Statement.",
  "input_type": "project_charter",
  "llm_prompt_instructions": {
    "goal": "Create a valid Project Scope Statement JSON, containing only the elements defined below, use information solely based on the input .",
    "steps": [
      "1. Project Overview: Extract from the charter a concise statement of project purpose, objectives, and expected outcomes. Insert data into ProjectName, high-level Objectives, SummaryDescription fields.",
      "2. Product Scope Description: Detail what will be built or delivered. List the key features, functions, and performance characteristics of the final product or service as described in the charter.Insert data into ProductScopeDescription fields ",
      "3. Deliverable Breakdown: Enumerate each major deliverable the project will produce. For each deliverable, assign a unique identifier and a brief description. Do not include any tasks, only end-products or results. Insert data into id, description fields ",
      "4. Scope Boundaries: Define what is in scope (specific inclusions) and what is out of scope (specific exclusions). Use two separate lists: one for inclusions and one for exclusions. Insert data into ScopeInclusions, ScopeExclusions fields",
      "5. Acceptance Criteria: For each deliverable, specify the measurable conditions or tests that must be satisfied for formal acceptance. Insert data into deliverableId, criteria fields if data exists. If missing, use `<MISSING_AcceptaneCriteria> `.",
      "6. Assumptions: List all assumptions from the charter (conditions believed to be true). Each assumption must have a unique ID and description. Insert data into id, description fields if data exists. If missing, use  `<MISSING_Assumptions>`.",
      "7. Constraints: List all project constraints from the charter (limitations on time, budget, resources, or technology). Each constraint must have a unique ID and description. Insert data into id, description fields if data exists. If missing, use  `<MISSING_Constraints>`.",
      "8. Output: Combine all the previous output_result into a single JSON object matching the template structure (fields: ProjectOverview, ProductScopeDescription, Deliverables, ScopeInclusions, ScopeExclusions, AcceptanceCriteria, Assumptions, Constraints). Ensure valid JSON and no additional fields."
    ]
  }
}